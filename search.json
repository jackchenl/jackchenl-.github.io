[{"title":"Hello World","url":"/2019/05/09/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n"},{"title":"递归函数原理技能包了解一下","url":"/2018/11/27/递归函数原理技能包了解一下/","content":"最近在看一本书：算法图解，然后刚好看到了递归，自以为很简单的嘛，然后就啪啪啪的打脸了。为啥原因被打脸呢？请看下面简单的递归求数组和的函数：<br/>\n\n```\nfunction sum (arr, value){\n    if(arr.length){\n        value +=  arr.pop();\n        sum(arr,value);\n    }\n    return value;\n}\nsum([1,2,3],0);\n\n```\n\n如果执行以上代码，你会发现：最终结果返回了3。当时很是纳闷？为什么会产生这个结果呢，<br/>\n\n带着这个疑问 我就好好又温习了一遍递归章节<br/>\n首先你必须知道 递归的两大条件：基线条件和递归条件<br/>\n    &nbsp;&nbsp;**1、基线条件：指的是停止调用自己的条件**<br/>\n    &nbsp;&nbsp;**2、递归条件：指的是调用自身的条件**<br/>\n\n知道了两大条件后我们还需要了解到 递归函数的原理：既计算机是如何调用递归式的函数：<br/>\n    &nbsp;&nbsp;**1、计算机中有一个调用栈的内存空间，这个空间 专门用于存放计算机将要调用的函数列表。** <br/>\n    &nbsp;&nbsp;**2、调用栈的两种使用方式，压入栈和弹出栈，这两个方法，好似存放和再拿出来使用。**<br/>\n    &nbsp;&nbsp;**3、递归函数，其实刚开始执行时，是先把已知的待执行函数都存放到调用栈中，然后依次执行，由于栈是先进后出的，所以递归函数的执行顺序是和我们想象中的有所不同的。**<br/>\n\n好了，了解完递归的原理后，我们再拿开篇的函数sum 执行你会发现，刚开始执行时：sum([1,2],3)被放到待执行栈中。然后依次是sum([1],5)、sum([],6)\n因为栈的特性：所以执行顺序刚好是相反的，sum([],6)  =>  sum([1],5)  =>  sum([1,2],3)  所以我们最终得到的 3<br/>\n<br/>\n具体执行顺序请看完整的流程图：<br/>\n\n![](16754b8785bdbab5.jpg)\n\n其实正确的写法很简单，并不需要传递多余的参数：<br/>\n```\nfunction sum(arr){\n    if(arr.length){\n        return arr.pop()  +  sum(arr)\n    }\n    return 0\n}\nsum([1,2,3]);\n```\n你get 到递归函数的技能了吗？\n","tags":["算法"]},{"title":"css网页的几种布局","url":"/2018/01/08/css网页的几种布局/","content":"## 前言\n2018年已经过了一周，总结一下2017年在公司wiki上写的一篇关于css布局的知识，当时也借鉴了几个大神写的css布局知识，和自己在项目中遇到的坑。废话不多说。请看以下的干货。\n## 1、左边固定，右边自适应布局的两种实现方式\n### 效果图如下：\n大屏展示：\n![](160249ed332f9635.jpg)\n小屏展示：\n![](16024a04e87f905c.jpg)\n\n### 第一种实现方式通过负边距与浮动 实现左边固定，右边自适应的布局。<br/>\n**主要代码如下：**\n```\n<style type=\"text/css\">\n\t.left{\n\t\tfloat: left;\n\t\twidth: 100%;\n\t\theight: 200px;\n\t\tbackground-color: red;\n\t}\n\t.left-content{\n\t\tmargin-left: 30%;\n\t}\n\t.right{\n\t\tfloat: left;\n\t\twidth: 30%;\n\t\tmargin-left: -100%;\n\t\theight: 200px;\n\t\tbackground-color: green;\n\t}\n\t.layout0{\n\t\tclear: both;\n\t\twidth: 100px;\n\t\theight: 100px;\n\t\tbackground-color: yellow;\n\t}\n</style>\n<body>\n\t<div id=\"body\">\n\t\t<div class=\"left\">\n\t\t\t<div class=\"left-content\">\n\t\t\t\t设置子元素的margin,然后父元素必须浮动。\n\t\t\t\t用父元素包裹，主要是因为right会覆盖left，从而导致left内容不可以看到，如果直接在left上设置margin或者padding会导致布局变化，因此只能再用一个div包裹内容，并且去除right覆盖的宽度。\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"right\">-margin必须大于或等于自身的宽度才会上移</div>\n\t\t<div class=\"layout0\"></div>\n\t</div>\n</body>\n```\n**实现过程中需要注意的是:**<br/>\n**1.** 自适应的容器需要容器包裹住，否则容器内的内容会被覆盖。<br/>\n**2.** right容器的负边距必须大于或等于自身的宽度才会上移。<br/>\n**3.** 如果right容器负边距等于自身的宽度它会靠右对齐，如果负边距等于-100%，则会靠左对齐。 <br/>\n\n### 第二种 通过浮动布局来实现左边固定，右边自适应的布局<br/>\n**主要的代码如下：**<br/>\n```\n<style type=\"text/css\">\n\t.left{\n\t\tfloat: left;\n\t\twidth: 200px;\n\t\theight: 200px;\n\t\tbackground-color: yellow;\n\t}\n\t.right{\n\t\tpadding-left: 200px;\n\t\theight: 200px;\n\t\tbackground-color: red;\n\t}\n\t@media (min-width: 650px) and (max-width: 1000px){\n\t\t.left{\n\t\t\twidth: 150px;\n\t\t}\n\t\t.right{\n\t\t\tmargin-left: 150px;\n\t\t}\n\t}\n\t@media (max-width: 640px){\n\t\t.left{\n\t\t\twidth: 100px;\n\t\t}\n\t\t.right{\n\t\t\tmargin-left: 100px;\n\t\t}\n\t}\n</style>\n<body>\n\t<div id=\"main\">\n\t\t<div class=\"left\">左边固定宽度，右边自适应</div>\n\t\t<div class=\"right\"></div>\n\t</div>\n</body>\n```\n\n**实现过程中需要注意的是：**\n**1.** left需要脱离文档流，而right只需要正常显示就可以。<br/>\n**2.** left只是覆盖在right上边，因此想要让right内容完整显示需要给right padding-left或者margin-left。<br/>\n## 2、双飞翼布局的三种实现方式<br/>\n### 效果图如下：<br/>\n大屏展示：<br/>\n![](1608cc070477792b.jpg)\n小屏展示：<br/>\n![](1608cc0e0a98e1ec.jpg)\n\n### 第一种通过负边距和浮动来实现<br/>\n**主要代码如下：**<br/>\n```\n<style type=\"text/css\">\n\t#head{\n\t\theight: 200px;\n\t\tbackground-color: yellow;\n\t}\n\t#body{\n\t\twidth: 100%;\n\t\tfloat: left;\n\t}\n\t.main{\n\t\tbackground-color: green;\n\t\tmin-height: 200px;\n\t\tmargin: 0 210px;\n\t}\n\t.left{\n\t\tfloat: left;\n\t\tbackground-color: red;\n\t\twidth: 200px;\n\t\theight: 200px;\n\t\tmargin-left: -100%;\n\t}\n\t.right{\n\t\tfloat: right;\n\t\tbackground-color: blue;\n\t\twidth: 200px;\n\t\theight: 200px;\n\t\tmargin-left: -200px;\n\t}\n\t#footer{\n\t\tclear: both;\n\t\theight: 200px;\n\t\tbackground-color: orange;\n\t}\n</style>\n<body>\n\t<div id=\"head\">即左右固定，中间自适应，它可以利用margin-left为负数来实现，它的实现原理就是margin为负值可以改变float元素的排列位置</div>\n\t<div id=\"body\">\n\t\t<div class=\"main\">当多个元素同时从标准流中脱离开来时，如果前一个元素的宽度为100%宽度，后面的元素通过负边距可以实现上移。当负的边距超过自身的宽度将上移，只要没有超过自身宽度就不会上移</div>\n\t</div>\n\t<div class=\"left\"></div>\n\t<div class=\"right\"></div>\n\t<div id=\"footer\"></div>\n</body>\n```\n**实现过程中需要注意:**<br/>\n**1.** 中间自适应的div需要放在left和right容器前面并且内容div需要用父容器包裹<br/>\n**2.** left和right容器向同一个方向浮动。<br/>\n\n### 第二种 通过浮动两边的div实现<br/>\n**主要代码如下：**<br/>\n\n```\n<style type=\"text/css\">\n\t#head{\n\t\theight: 200px;\n\t\tbackground-color: yellow;\n\t}\n\t#body{\n\t\toverflow: hidden;\n\t}\n\t.left{\n\t\tfloat: left;\n\t\tbackground-color: red;\n\t\twidth: 200px;\n\t\theight: 200px;\n\t}\n\t.right{\n\t\tfloat: right;\n\t\tbackground-color: blue;\n\t\twidth: 200px;\n\t\theight: 200px;\n\t}\n\t.main{\n\t\tbackground-color: green;\n\t\theight: 200px;\n\t\tmargin: 0 210px;\n\t}\n\t#footer{\n\t\tclear: both;\n\t\theight: 200px;\n\t\tbackground-color: orange;\n\t}\n</style>\n<body>\n\t<div id=\"head\">左右固定宽度并且向两边浮动，中间的div设置两边的margin</div>\n\t<div id=\"body\">\n\t\t<div class=\"left\"></div>\n\t\t<div class=\"right\"></div>\n\t\t<div class=\"main\">该方案有一个缺陷，在小屏幕情况下回导致right被挤下去，main没有了</div>\n\t</div>\n\t<div id=\"footer\"></div>\n</body>\n```\n**实现过程中需要注意:**<br/>\n**1.** 该方式只需要注意中间自适应的div需要放在left和right容器的后面。<br/>\n**2.** left和right容器向两边浮动。<br/>\n\n### 第三种 通过flex属性来实现<br/>\n**主要代码如下：**<br/>\n```\n<!DOCTYPE html>\n<html>\n<meta charset=\"utf-8\">\n<head>\n\t<title>使用flex 实现“双飞翼布局”</title>\n</head>\n<style type=\"text/css\">\n\t#main{\n\t\tdisplay: flex;\n\t\tdisplay: -webkit-flex;//谷歌浏览器加前缀\n\t\tflex-flow: row nowrap;\n\t\tjustify-content: flex-start;\n\t\talign-items: center;\n\t}\n\t.left{\n\t\tflex: 0 0 auto;\n\t\twidth:100px;\n\t\theight: 200px;\n\t\tbackground-color: red;\n\t\tword-wrap: break-word; \n\t\toverflow: hidden;\n\t}\n\t.main{\n\t\tflex: 1 1 auto;\n\t\theight: 200px;\n\t\tbackground-color: green;\n\t}\n\t.right{\n\t\tflex: 0 0 auto;\n\t\twidth: 100px;\n\t\theight: 200px;\n\t\tbackground-color: yellow;\n\t}\n</style>\n<body>\n\t<div id=\"main\">\n\t\t<div class=\"left\">flex 语法我参照了阮一峰关于flex语法介绍 http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</div>\n\t\t<div class=\"main\"></div>\n\t\t<div class=\"right\"></div>\n\t</div>\n</body>\n</html>\n```\n如果未了解过flex布局请移至文末点击链接查看 阮一峰大神写的关于flex语法\n\n## 3、定位布局\n这边就不絮絮叨叨的讲一些基础的css定位知识了（ps:不会的请自行到w3c官网查阅），我主要来讲解一下工作中遇到的坑。以免其他人和我一样掉入坑中。<br/>\n### 第一：使用多个fixed时，注意自己需要基于什么定位，因为如果父级有用transform属性时，可能会导致子元素的fixed基于父元素容器定位，而不是基于body定位。效果如下：<br/>\n    \n![](160d06ff9f0ae490.jpg)\n在上图中我可以发现中间黑色的小框是基于父级来定位，并且宽度也基于父容器的50%。详细的请看下面代码：\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <title>关于position的定位的坑</title>\n</head>\n<style type=\"text/css\">\n    body{\n        margin: 0;\n        padding: 0;\n    }\n    i{\n        font-style: normal;\n        cursor: pointer;\n    }\n    #delete-button{\n        position: absolute;\n        left: 45%;\n        top: 45%;\n        text-align: center;\n        vertical-align: middle;\n        height: 50px;\n        margin: auto;\n        cursor: pointer;\n    }\n    #delete-button > i{\n        display: inline-block;\n        width: 32px;\n        height: 32px;\n        border-radius: 16px;\n        background-color: orange;\n        color: red;\n        font-size: 32px;\n        vertical-align: middle;\n        line-height: 28px;\n    }\n    /*第一个模态框的样式*/\n    #layout{\n        display: none;\n        width: 100%;\n        height: 100%;\n    }\n    /*使用flex布局水平竖直居中*/\n    /*#layout-box{\n        position: fixed;\n        width: 100%;\n        height: 100%;\n        left: 0;\n        top: 0;\n        display: flex;\n        display: -webkit-flex;\n        flex-flow: column nowrap;\n        justify-content: center;\n        align-items: center;\n        background-color: rgba(0,0,0,0.3);\n    }*/\n    /*使用postion 和 transform 水平垂直居中*/\n    #layout-box{\n        position: fixed;\n        width: 100%;\n        height: 100%;\n        background-color: rgba(0,0,0,0.3);\n    }\n    .modal-dialog{\n        position: absolute;\n        left: 50%;\n        top: 50%;\n        width: 500px;\n        height: 200px;\n        border-radius: 10px;\n        transform: translate(-50%, -50%);\n        -webkit-transform: translate(-50%, -50%);\n        -moz-transform: translate(-50%, -50%);\n        -o-transform: translate(-50%, -50%);\n        background-color: #fff;\n    }\n    .dialog-title{\n        text-align: center;\n        color: #333;\n        font-size: 28px;\n        margin-bottom: 10px;\n    }\n    .dialog-content{\n        text-align: center;\n        color: #666;\n        font-size: 18px;\n    }\n    .dialog-button{\n        margin-top: 20px;\n        width: 100%;\n        color: #333;\n    }\n    .dialog-button >.button-box{\n        display: inline-block;\n        width: 48%;\n        text-align: center;\n    }\n    .button-box span{\n        display: inline-block;\n        padding: 10px;\n        color: #fff;\n        border-radius: 6px;\n        cursor: pointer;\n    }\n    #confirm{\n        background-color: #27ad9a;\n    }\n    #cancel{\n        background-color: red;\n    }\n    /*添加按钮的样式*/\n    #add-button > i{\n        display: inline-block;\n        width: 32px;\n        height: 32px;\n        border-radius: 16px;\n        background-color: #27ad9a;\n        color: #fff;\n        font-size: 32px;\n        vertical-align: middle;\n        line-height: 28px;\n        text-align: center;\n    }\n    #add-button{\n        display: inline-block;\n        cursor: pointer;\n    }\n    /*第二个模态框的样式*/\n    .layout2{\n        display: none;\n        position: fixed;\n        width: 100%;\n        height: 100%;\n        left: 0;\n        top: 0;\n        background-color: rgba(0,0,0,0.2);\n    }\n    .modal-dialog2{\n        position: fixed;\n        left: 50%;\n        top: 50%;\n        width: 50%;\n        height: 50%;\n        border-radius: 10px;\n        transform: translate(-50%, -50%);\n        -webkit-transform: translate(-50%, -50%);\n        -moz-transform: translate(-50%, -50%);\n        -o-transform: translate(-50%, -50%);\n        background-color: rgba(0,0,0,0.2);\n    }\n    .modal-dialog2 > span{\n        display: block;\n    }\n    .modal-text{\n        float: left;\n    }\n    #close{\n        color: red;\n        font-size: 24px;\n        float: right;\n        cursor: pointer;\n    }\n</style>\n<body>\n    <div id=\"delete-button\"><i>-</i>删除</div>\n    <div id=\"layout\">\n        <div id=\"layout-box\">\n            <div class=\"modal-dialog\">\n                <div class=\"dialog-title\">提示</div>\n                <div class=\"dialog-content\">是否删除该项,点击确定</div>\n                <div class=\"dialog-button\">\n                    <div class=\"button-box\">\n                        <span id=\"confirm\">确定</span>\n                    </div>\n                    <div class=\"button-box\">\n                        <span id=\"cancel\">取消</span>\n                    </div>\n                </div>\n                <div id=\"add-button\"><i>+</i>添加</div>\n                <div class=\"layout2\">\n                    <div class=\"modal-dialog2\">\n                        <span class=\"modal-text\">你是我的小可爱</span>\n                        <span id=\"close\">关闭</span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</body>\n<script type=\"text/javascript\">\n    document.getElementById(\"delete-button\").onclick= function(){\n        var layout = document.getElementById(\"layout\")\n        layout.style.display = \"block\"\n    }\n    document.getElementById(\"confirm\").onclick=function(){\n        var layout = document.getElementById(\"layout\")\n        layout.style.display = \"none\"\n    }\n    document.getElementById(\"cancel\").onclick=function(){\n        var layout = document.getElementById(\"layout\")\n        layout.style.display = \"none\"\n    }\n    document.getElementById(\"add-button\").onclick=function(){\n        var layout = document.getElementsByClassName(\"layout2\")\n        layout[0].style.display = \"block\"\n    }\n    document.getElementById(\"close\").onclick=function(){\n        var layout = document.getElementsByClassName(\"layout2\")\n        layout[0].style.display = \"none\"\n    }\n</script>\n</html>\n```\n如果我们尝试把父容器上的transform属性去除，我们可以看到 子容器没有基于父容器定位，而是基于body定位的，宽度也是基于body给的50%宽度。效果图如下：\n![](160d07734ba09511.jpg)\n详细请看代码：\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <title>关于position的定位的坑</title>\n</head>\n<style type=\"text/css\">\n    body{\n        margin: 0;\n        padding: 0;\n    }\n    i{\n        font-style: normal;\n        cursor: pointer;\n    }\n    #delete-button{\n        position: absolute;\n        left: 45%;\n        top: 45%;\n        text-align: center;\n        vertical-align: middle;\n        height: 50px;\n        margin: auto;\n        cursor: pointer;\n    }\n    #delete-button > i{\n        display: inline-block;\n        width: 32px;\n        height: 32px;\n        border-radius: 16px;\n        background-color: orange;\n        color: red;\n        font-size: 32px;\n        vertical-align: middle;\n        line-height: 28px;\n    }\n    /*第一个模态框的样式*/\n    #layout{\n        display: none;\n        width: 100%;\n        height: 100%;\n    }\n    /*使用flex布局水平竖直居中*/\n    #layout-box{\n        position: fixed;\n        width: 100%;\n        height: 100%;\n        left: 0;\n        top: 0;\n        display: flex;\n        display: -webkit-flex;\n        flex-flow: column nowrap;\n        justify-content: center;\n        align-items: center;\n        background-color: rgba(0,0,0,0.3);\n    }\n    /*使用postion 和 transform 水平垂直居中*/\n    .modal-dialog{\n        width: 500px;\n        height: 200px;\n        border-radius: 10px;\n        background-color: #fff;\n    }\n    .dialog-title{\n        text-align: center;\n        color: #333;\n        font-size: 28px;\n        margin-bottom: 10px;\n    }\n    .dialog-content{\n        text-align: center;\n        color: #666;\n        font-size: 18px;\n    }\n    .dialog-button{\n        margin-top: 20px;\n        width: 100%;\n        color: #333;\n    }\n    .dialog-button >.button-box{\n        display: inline-block;\n        width: 48%;\n        text-align: center;\n    }\n    .button-box span{\n        display: inline-block;\n        padding: 10px;\n        color: #fff;\n        border-radius: 6px;\n        cursor: pointer;\n    }\n    #confirm{\n        background-color: #27ad9a;\n    }\n    #cancel{\n        background-color: red;\n    }\n    /*添加按钮的样式*/\n    #add-button > i{\n        display: inline-block;\n        width: 32px;\n        height: 32px;\n        border-radius: 16px;\n        background-color: #27ad9a;\n        color: #fff;\n        font-size: 32px;\n        vertical-align: middle;\n        line-height: 28px;\n        text-align: center;\n    }\n    #add-button{\n        display: inline-block;\n        cursor: pointer;\n    }\n    /*第二个模态框的样式*/\n    .layout2{\n        display: none;\n        position: fixed;\n        width: 100%;\n        height: 100%;\n        left: 0;\n        top: 0;\n        background-color: rgba(0,0,0,0.2);\n    }\n    .modal-dialog2{\n        position: fixed;\n        left: 50%;\n        top: 50%;\n        width: 50%;\n        height: 50%;\n        border-radius: 10px;\n        transform: translate(-50%, -50%);\n        -webkit-transform: translate(-50%, -50%);\n        -moz-transform: translate(-50%, -50%);\n        -o-transform: translate(-50%, -50%);\n        background-color: rgba(0,0,0,0.2);\n    }\n    .modal-dialog2 > span{\n        display: block;\n    }\n    .modal-text{\n        float: left;\n    }\n    #close{\n        color: red;\n        font-size: 24px;\n        float: right;\n        cursor: pointer;\n    }\n</style>\n<body>\n    <div id=\"delete-button\"><i>-</i>删除</div>\n    <div id=\"layout\">\n        <div id=\"layout-box\">\n            <div class=\"modal-dialog\">\n                <div class=\"dialog-title\">提示</div>\n                <div class=\"dialog-content\">是否删除该项,点击确定</div>\n                <div class=\"dialog-button\">\n                    <div class=\"button-box\">\n                        <span id=\"confirm\">确定</span>\n                    </div>\n                    <div class=\"button-box\">\n                        <span id=\"cancel\">取消</span>\n                    </div>\n                </div>\n                <div id=\"add-button\"><i>+</i>添加</div>\n                <div class=\"layout2\">\n                    <div class=\"modal-dialog2\">\n                        <span class=\"modal-text\">你是我的小可爱</span>\n                        <span id=\"close\">关闭</span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</body>\n<script type=\"text/javascript\">\n    document.getElementById(\"delete-button\").onclick= function(){\n        var layout = document.getElementById(\"layout\")\n        layout.style.display = \"block\"\n    }\n    document.getElementById(\"confirm\").onclick=function(){\n        var layout = document.getElementById(\"layout\")\n        layout.style.display = \"none\"\n    }\n    document.getElementById(\"cancel\").onclick=function(){\n        var layout = document.getElementById(\"layout\")\n        layout.style.display = \"none\"\n    }\n    document.getElementById(\"add-button\").onclick=function(){\n        var layout = document.getElementsByClassName(\"layout2\")\n        layout[0].style.display = \"block\"\n    }\n    document.getElementById(\"close\").onclick=function(){\n        var layout = document.getElementsByClassName(\"layout2\")\n        layout[0].style.display = \"none\"\n    }\n</script>\n</html>\n```\n### 第二：解决在手机上的抖动问题（ps：这个问题我参照了网上大神写的一篇博客请移至文末查看）\n**一、**在webkit内核浏览器中 给fixed加上防抖样式 - webkit - transform: translateZ(0);\n\n**二、**设置html 和body 的css {height:100%;overflow:auto;margin:0;} 这个影响全局样式不建议使用。\n\n**三、** 在fiexd内设置position:absolute，如下：\n\n```\n<div style=\"position:fiexd;bottom:0px;\">\n\n  <div style=\"position:absolute;\">\n\n  </div>\n\n</div>\n```\n![](160d07c4ef1f8183.jpg)\n\n## 4、百分比布局 主要通过设置元素的宽度为百分比或者高度为百分比。比如：width:50%; height:50%; 这样的写法。\n\n## 5、响应式布局（主要使用媒体查询来实现响应式设计）\n### 主要使用CSS3 @media 来做不同终端的响应式设计\n主要在css文件中写入\n```\n@media screen and (max-width:600px){\n    写入当屏幕小于或等于600px时的样式\n}\n@media screen and (min-width:900px){\n    写入当屏幕大于或等于900px时的样式\n}\n@media screen and (min-width:600px) and (max-width:900px){\n    写入当屏幕在600px-900px之间的样式\n}\n@media screen and (max-device-width: 480px){\n    写入最大设备宽度为480px，比如说iPhone上的显示，这里的max-device-width所指的是设备的实际分辨率，也就是指可视面积分辨率\n}\n@media only screen and (-webkit-min-device-pixel-ratio: 2){\n    写入专门针对iPhone4的移动设备样式\n}\n@media all and (orientation:portrait){\n    写入设备在纵向时的样式\n}\n@media all and (orientation:landscape){\n    写入设备在横向时的样式\n}\n@media not print and (max-width: 1200px){\n    not是用来排除某种制定的媒体类型\n    写入在除打印设备和设备宽度小于1200px下的所有设备的样式\n}\n@media only screen and (max-device-width:240px){\n    only用来定某种特定的媒体类型,可以用来排除不支持媒体查询的浏览器。\n    写入只能在最大设备宽度为240px的屏幕下使用的样式\n}\n\n```\n\n## 参考的文章：<br/>\n[CSS3与页面布局学习总结（四）——页面布局的多种方法 ](http://www.cnblogs.com/zhangyongl/p/6123522.html)<br/>\n[阮一峰——关于flex语法介绍](http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html)<br/>\n[最全CSS各种布局详解](https://www.jianshu.com/p/66550dc3a825)<br/>\n[CSS 布局说——可能是最全的](https://mp.weixin.qq.com/s/iQ8mSr4oEAC8Ve6IdiN9jQ)<br/>\n[CSS 黑魔法小技巧，让你少写不必要的JS，代码更优雅](https://github.com/jawil/blog/issues/29)\n[实用的60个CSS代码片段](https://www.jianshu.com/p/e878122a92a3)\n[解决CSS position:fixed 抖动问题](http://www.cnblogs.com/Arlar/p/5660368.html)\n[介绍了各手机的像素密度_(-webkit-min-device-pixel-ratio)_响应式布局](http://blog.csdn.net/fgdfgasd/article/details/52835755)<br/>\n[张鑫旭关于设备像素比devicePixelRatio简单介绍](http://www.zhangxinxu.com/wordpress/2012/08/window-devicepixelratio/)<br/>\n[CSS3--媒体查询@media](http://blog.csdn.net/mpdemp/article/details/70282004)\n\n\n## 小结：\n起初我并不注重css学习，但项目中每张页面都要做响应式，所以为了自己少写css代码，提高工作效率，并减少冗余css，我不得不好好了解css布局，来应对各种UI图纸和响应式。同时写这篇文章，也希望各位，不要再去踩相同的坑。初次写文章，如若文中有什么不对的地方，还望指正，谢谢各位看官大佬们。","tags":["前端","css"]}]